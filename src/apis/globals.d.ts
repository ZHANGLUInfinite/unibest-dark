/* tslint:disable */
/* eslint-disable */
/**
 * 宠物API - version 1.0
 *
 * 猫和狗的CRUD API演示
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type Cat = {
  /**
   * 猫的ID
   * [required]
   */
  id: number;
  /**
   * 猫的名字
   * [required]
   */
  name: string;
  /**
   * 猫的年龄
   * [required]
   */
  age: number;
  /**
   * 猫的品种
   * [required]
   */
  breed: string | null;
};
export type CreateCatDto = {
  /**
   * 猫的名字
   * [required]
   */
  name: string;
  /**
   * 猫的年龄
   * [required]
   */
  age: number;
  /**
   * 猫的品种
   */
  breed?: string;
};
export type UpdateCatDto = object;
declare global {
  interface Apis {
    App: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      AppController_getHello<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'App.AppController_getHello', Config>;
    };
    Cats: {
      /**
       * ---
       *
       * [POST] 创建新猫
       *
       * **path:** /cats
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 猫的名字
       *   // [required]
       *   name: string
       *   // 猫的年龄
       *   // [required]
       *   age: number
       *   // 猫的品种
       *   breed?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 猫的ID
       *   // [required]
       *   id: number
       *   // 猫的名字
       *   // [required]
       *   name: string
       *   // 猫的年龄
       *   // [required]
       *   age: number
       *   // 猫的品种
       *   // [required]
       *   breed: string | null
       * }
       * ```
       */
      CatsController_create<
        Config extends Alova2MethodConfig<Cat> & {
          data: CreateCatDto;
        }
      >(
        config: Config
      ): Alova2Method<Cat, 'Cats.CatsController_create', Config>;
      /**
       * ---
       *
       * [GET] 获取所有猫
       *
       * **path:** /cats
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Array<{
       *   // 猫的ID
       *   // [required]
       *   id: number
       *   // 猫的名字
       *   // [required]
       *   name: string
       *   // 猫的年龄
       *   // [required]
       *   age: number
       *   // 猫的品种
       *   // [required]
       *   breed: string | null
       * }>
       * ```
       */
      CatsController_findAll<Config extends Alova2MethodConfig<Cat[]>>(
        config?: Config
      ): Alova2Method<Cat[], 'Cats.CatsController_findAll', Config>;
      /**
       * ---
       *
       * [GET] 获取单只猫
       *
       * **path:** /cats/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 猫的唯一标识
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 猫的ID
       *   // [required]
       *   id: number
       *   // 猫的名字
       *   // [required]
       *   name: string
       *   // 猫的年龄
       *   // [required]
       *   age: number
       *   // 猫的品种
       *   // [required]
       *   breed: string | null
       * }
       * ```
       */
      CatsController_findOne<
        Config extends Alova2MethodConfig<Cat> & {
          pathParams: {
            /**
             * 猫的唯一标识
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Cat, 'Cats.CatsController_findOne', Config>;
      /**
       * ---
       *
       * [PATCH] 更新猫信息
       *
       * **path:** /cats/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 猫的唯一标识
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 猫的ID
       *   // [required]
       *   id: number
       *   // 猫的名字
       *   // [required]
       *   name: string
       *   // 猫的年龄
       *   // [required]
       *   age: number
       *   // 猫的品种
       *   // [required]
       *   breed: string | null
       * }
       * ```
       */
      CatsController_update<
        Config extends Alova2MethodConfig<Cat> & {
          pathParams: {
            /**
             * 猫的唯一标识
             * [required]
             */
            id: number;
          };
          data: UpdateCatDto;
        }
      >(
        config: Config
      ): Alova2Method<Cat, 'Cats.CatsController_update', Config>;
      /**
       * ---
       *
       * [DELETE] 删除猫
       *
       * **path:** /cats/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 猫的唯一标识
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      CatsController_remove<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * 猫的唯一标识
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'Cats.CatsController_remove', Config>;
    };
  }

  var Apis: Apis;
}
